---
import { getEntry } from 'astro:content'
import IconChevron from '@/assets/icons/chevron.svg'

interface Props {
  class?: string
  id?: string
  placeholder?: string
  src?: string
}

interface Translation {
  placeholder?: string
  options?: string[]
}

const { class: className, id, placeholder, src } = Astro.props

let t: Translation = {}

if (src) {
  const { data } = await getEntry(
    'translations',
    `${Astro.currentLocale}/${src}`
  )!

  t = data
}
---

<bfy-select class="relative">
  <select
    class:list={[
      className ? className : 'w-full',
      'peer appearance-none py-3.75 pl-4.5 pr-12 rounded ring ring-inset',
      'leading-none text-current/70 focus:ring-orange-600 focus:text-current'
    ]}
    id={id}
  >
    <option value="" hidden>{placeholder || t['placeholder']}</option>
    <slot />
    {t.options?.map((option) => <option>{option}</option>)}
  </select>
  <IconChevron
    class:list={[
      'absolute inset-y-0 right-4.5 w-3 my-auto text-orange-600',
      'transition-transform peer-open:rotate-x-180'
    ]}
  />
</bfy-select>

<script>
  class BfySelect extends HTMLElement {
    connectedCallback() {
      const select = this.querySelector('select')!

      select.addEventListener('change', () => {
        select.classList.replace('text-current/70', 'ring-current/70')
      })
    }
  }

  customElements.define('bfy-select', BfySelect)
</script>
